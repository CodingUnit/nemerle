using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of Locator.
  /// </summary>
  class Locator
  {
    parser : FsmParser;
    loc    : Location;
    
    public this(parser : FsmParser, loc : Location)
    {
      this.parser = parser;
      this.loc = loc;
    }
    
    public GetLoc(pos : int) : Location
    {
      if (pos == -1)
      {
        loc
      } else
      {
        def line = parser.ParsingSource.GetSourceLine(pos);
        def (lin, _) = line.StartLineColumn;
        def col = pos - line.StartPos + 1;
        def line = loc.Line + lin - 1;
        Location(loc, line, col);
      }
    }
    
    LocateTarget(t : TargetType) : void
    {
      Locate(t);
      match (t)
      {
        | TargetType.Qualified(_, t) => LocateTarget(t)
        | TargetType.PseudoState(n)  => LocatePseudo(n)
        | _                          => ()
      }
    }
    
    LocatePseudo(node : PseudoStateModelNode) : void
    {
      Locate(node);
      match (node)
      {
        | PseudoStateModelNode.Initial(p)            => LocateTran(p);
        | PseudoStateModelNode.History(default = t)  => t.Iter(LocateTran);
        | PseudoStateModelNode.Fork(t)               => t.Iter(LocateTarget)
        | PseudoStateModelNode.Join(_, t)            => LocateTran(t)
        | PseudoStateModelNode.Junction(nodes = n)   => foreach (n in n)
                                                        {
                                                          | JunctionNode(g, a, t) => Locate(g);
                                                                                     when (a is Some(a))
                                                                                     {
                                                                                       Locate(a);
                                                                                       Locate(a.actions);
                                                                                     }
                                                                                     Locate(t);
                                                                                     LocateTarget(t);
                                                        }
        | PseudoStateModelNode.EntryPoint(_, tr)      => Locate(tr);
                                                         LocateTran(tr)
        | PseudoStateModelNode.ExitPoint(_, Some(tr)) => Locate(tr);
                                                         LocateTran(tr)
        | _                                           => ()
      }
    }
    
    LocateTran(tr : StateNode.Transition) : void
    {
      | StateNode.Transition(f, e, g, a, t, _) => 
      
        Locate(tr);
        when (a is Some(a))
        {
          Locate(a);
          Locate(a.actions);
        }
        Locate(e);
        f.Iter(Locate);
        Locate(g);
        Locate(t);
        LocateTarget(t);
    }
    
    Locate(node : LocatedNode) : void
    {
      node.Location = GetLoc(node.pos);
    }
    
    Locate(node : IEnumerable[LocatedNode]) : void
    {
      node.Iter(Locate)
    }
    
    public Locate(fsm : StateNode.StateMachine) : void
    {
      Locate(fsm : LocatedNode);
      Locate(fsm.usings);
      def iter = TreeUtils.GetBreadthFirstEnumerable(fsm.state, _.sub_states);
      
      foreach (st in iter)
      {
        Locate(st);
        Locate(st.attributes);
        Locate(st.defer);
        Locate(st.do_activity);
        Locate(st.entry);
        Locate(st.errors);
        Locate(st.exit);
        Locate(st.pseudo_states);
        Locate(st.transitions);
        st.transitions.Iter(LocateTran);
        st.pseudo_states.Iter(x => LocatePseudo(x.node));
      }
    }

  }
}
