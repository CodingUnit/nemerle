using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using System.Threading;


namespace Nemerle.Statechart
{

  public partial class FsmTester
  {
    fsm : ITestStateMachine;
    queue : List[string] = List();

    public event OkTest : Action;
    public event Failed : Action;
    public event Print  : Action[string];
    public event Send   : Action[string];

    public static GetTester(this fsm : ITestStateMachine) : FsmTester
    {
      FsmTester(fsm)
    }

    public WriteCombined(str : string) : void
    {
      Console.WriteLine(str); 
      queue.Add(str)
    }
    
    // TODO: сделать без ActionExecuted и TransitionCompleted 
    // пристыковывая ко всем действиям используя внутренний установщик в каждом автомате
    public ConsoleTestInit(thrw : bool = false) : void
    {
      Throw = thrw;
      Print  += x => Console.WriteLine($"\n$x");
      Send   += x => Console.WriteLine($"Processing a '$x' ");
      OkTest += _ => Console.WriteLine("Ok");
      Failed += _ => {Console.WriteLine("Failed"); when (Throw) throw InvalidOperationException("Fail condition")};
      fsm.ActionExecuted += Console.WriteLine;
      fsm.TransitionCompleted += _ => CompleteResult();
    }

    wait_signal : ManualResetEvent = ManualResetEvent(false);

    public Throw : bool {get;set;}
    
    mutable wait_state : string;
    mutable max_respond : int;
    
    CompleteResult() : void
    {
      if (wait_state != null)
      {
        when (fsm.IsInState(wait_state)) _ = wait_signal.Set();
      } else 
      {
        _ = wait_signal.Set();
      }
    }

    OnOkTest() : void
    {
      OkTest?.Invoke()
    }

    OnPrint(str : string) : void
    {
      when (str != null) Print?.Invoke(str)
    }

    OnFailed() : void
    {
      Failed?.Invoke();
    }

    public this(fsm : ITestStateMachine)
    {
      this.fsm = fsm;
      fsm.ActionExecuted += queue.Add;
    }

    public WaitForState(str : string, max : int = 10000) : void
    {
      _ = wait_signal.Reset();
      wait_state = str;
      _ = wait_signal.WaitOne(TimeSpan.FromMilliseconds(max));
    }
    
    static EntryImpl(en : IEnumerable[string]) : IEnumerable[string]
    {
      en.Select(x => $"Entry$(x)")
    }

    static ExitImpl(ex : IEnumerable[string]) : IEnumerable[string]
    {
      ex.Select(x => $"Exit$(x)")
    }

    static ActionsImpl(act : IEnumerable[string]) : IEnumerable[string]
    {
      act
    }

    public static Entry(params en : array[string]) : array[string]
    {
      EntryImpl(en).ToArray()
    }

    public static Exit(params ex : array[string]) : array[string]
    {
      ExitImpl(ex).ToArray()
    }

    public static Actions(params act : array[string]) : array[string]
    {
      ActionsImpl(act).ToArray()
    }

    prepare() : void
    {
      queue.Clear();
      wait_state = null;
      max_respond = 10000;
    }

    TestWait(func : void -> void, state : string, max_respond : int, params acts : array[string]) : bool
    {
      prepare();
      wait_state = state;
      this.max_respond = max_respond;
      func();
      CheckResult(state, acts)
    }
    
    CheckResult(state : string, acts : array[string]) : bool
    {
      def acts = if (state != null) acts else Actions(acts);
      def acts = if (acts.Length == queue.Count()) acts.ZipLazy(queue).All(_ == _) else false;
      Console.WriteLine($"[$fsm]");
      def state = state == null || fsm.IsInState(state);
      state && acts
    }
    
    Test(func : void -> void, state : string, params acts : array[string]) : bool
    {
      prepare();
      func();
      CheckResult(state, acts)
    }

    SendEvent(evt : HsmEvent) : void
    {
      Send?.Invoke(evt.Name);
      _ = wait_signal.Reset();
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne(max_respond)
    }

    //SendEventWait(evt : string) : void
    //{
    //  SendEvent(evt);
    //  _ = wait_signal.Reset();
    //  _ = wait_signal.WaitOne()
    //}
    
    SendEvent(evt : string) : void
    {
      def evt = evt.SpacesToUnderline();
      Send?.Invoke(evt);
      _ = wait_signal.Reset();
      fsm.PostEvent(evt);
      _ = wait_signal.WaitOne(max_respond)
    }
    
    public TestCond(evt : string, res : string, params acts : array[string]) : bool
    {
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public TestCond(evt : HsmEvent, res : string, params acts : array[string]) : bool
    {
      Test(_ => SendEvent(evt), res, acts)
    }

    public TestStateCond(evt : HsmEvent, res : string) : bool
    {
      Test(_ => SendEvent(evt), res)
    }

    public TestCond(evt : string, res : string, ex : list[string], act : list[string], en : list[string]) : bool
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }
    
    public TestCond(evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : bool
    {
      def acts = ExitImpl(ex).Concat(ActionsImpl(act)).Concat(EntryImpl(en)).ToArray();
      Test(_ => SendEvent(evt), res, acts)
    }

    public InitiateName(name : string, res : string, params acts : array[string]) : void
    {
      OnPrint(name);
      if (InitiateCond(res, acts)) OnOkTest() else OnFailed()
    }

    public Test(evt : HsmEvent, res : string) : void
    {
      if (TestCond(evt, res)) OnOkTest() else OnFailed()
    }

    public Test(evt : string, res : string, params acts : array[string]) : void
    {
      if (TestCond(evt, res, acts)) OnOkTest() else OnFailed()
    }
    
    
    public TestWait(evt : string, max_interval : int, ex : list[string], en : list[string]) : void
    {
      def acts = ExitImpl(ex).Concat(EntryImpl(en)).ToArray();
      if (TestWait(_ => SendEvent(evt), en.Last(), max_interval, acts)) OnOkTest() else OnFailed()
    }
    
    public TestWait(evt : string, max_interval : int, res : string, params acts : array[string]) : void
    {
      //if (Test(_ => SendEvent(evt), res, acts)) OnOkTest() else OnFailed()
      if (TestWait(_ => SendEvent(evt), res, max_interval, acts)) OnOkTest() else OnFailed()
    }
    
    public TestName(name : string, evt : HsmEvent, res : string, params acts : array[string]) : void
    {
      OnPrint(name);
      if (TestCond(evt, res, acts)) OnOkTest() else OnFailed()
    }

    public Test(evt : HsmEvent, res : string, params acts : array[string]) : void
    {
      TestName(null, evt, res, acts)
    }

    public TestName(name : string, evt : HsmEvent, res : string) : void
    {
      OnPrint(name);
      if (TestCond(evt, res)) OnOkTest() else OnFailed()
    }

    public TestName(name : string, evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      OnPrint(name);
      if (TestCond(evt, res, ex, act, en)) OnOkTest() else OnFailed()
    }

    public Test(evt : string, ex : list[string], en : list[string]) : void
    {
      Test(evt, en.Last(), ex, en)
    }
    
    public Test(evt : string, res : string, ex : list[string], en : list[string]) : void
    {
      if (TestCond(evt, res, ex, [], en)) OnOkTest() else OnFailed()
    }
    
    public Test(evt : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      def res = en.Last();
      Test(evt, res, ex, act, en)
    }
    
    public Test(evt : string, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      if (TestCond(evt, res, ex, act, en)) OnOkTest() else OnFailed()
    }
    
    public Test(evt : HsmEvent, res : string, ex : list[string], act : list[string], en : list[string]) : void
    {
      TestName(null, evt, res, ex, act, en)
    }

    public Test(evt : HsmEvent, ex : list[string], act : list[string], en : list[string]) : void
    {
      TestName(null, evt, ex, act, en)
    }

    public Test(name : string, evt : HsmEvent, ex : list[string], en : list[string]) : void
    {
      TestName(name, evt, ex, [], en)
    }

    public Test(evt : HsmEvent, ex : list[string], en : list[string]) : void
    {
      TestName(null, evt, ex, [], en)
    }

    public TestName(name : string, evt : HsmEvent, ex : list[string], act : list[string], en : list[string]) : void
    {
      def res = en.Last();
      TestName(name, evt, res, ex, act, en);
    }

    InitiateCond(res : string, acts : array[string]) : bool
    {
      Test(fsm.Initiate, res, acts)
    }

    public InitiateName(name : string, en : list[string]) : void
    {
      def res = en.Last();
      InitiateName(name, res, EntryImpl(en).ToArray())
    }

    public Initiate(en : list[string]) : void
    {
      def res = en.Last();
      InitiateName(null, res, EntryImpl(en).ToArray())
    }

    public Initiate(res : string, en : list[string]) : void
    {
      InitiateName(null, res, EntryImpl(en).ToArray())
    }
    
    public Initiate(res : string, params acts : array[string]) : void
    {
      InitiateName(null, res, acts.ToArray())
    }


  }

}
