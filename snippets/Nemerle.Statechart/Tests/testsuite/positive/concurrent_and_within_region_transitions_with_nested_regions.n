using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;

  //flags debug;

   region J
   {
    
     region A
     {
       state B
       {
         a => C;
         b => C;
       }
     
       state C
       {
         a => B;
         b => B;
       }
     
     } and
     {
       state D
       {
         a => F;
         c => F;
       }
     
       state F
       {
         a => D;
         c => D;
       }
     }
   
   } and
   {
     
     state K
     {
       a => L;
     }
     
     state L
     {
       a => K;
     }
   }
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit(true);
    tester.Initiate("KBD", ["J", "A", "K", "B", "D"]);
    tester.Test("b", "KCD", ["B"], ["C"]);
    tester.Test("b", "KBD", ["C"], ["B"]);
    tester.Test("c", "KBF", ["D"], ["F"]);
    tester.Test("c", "KBD", ["F"], ["D"]);
    tester.Test("a", "LCF", ["B", "D", "K"], ["L", "C", "F"]);
    tester.Test("c", "LCD", ["F"], ["D"]);
    tester.Test("a", "KBF", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "KCF", ["B"], ["C"]);
    tester.Test("a", "LBD", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("c", "LBF", ["D"], ["F"]);
    tester.Test("a", "KCD", ["B", "F", "L"], ["K", "C", "D"]);
    tester.Test("c", "KCF", ["D"], ["F"]);
    tester.Test("a", "LBD", ["C", "F", "K"], ["L", "B", "D"]);
    tester.Test("b", "LCD", ["B"], ["C"]);
    tester.Test("a", "KBF", ["C", "D", "L"], ["K", "B", "F"]);
    tester.Test("b", "KCF", ["B"], ["C"]);
    tester.Test("c", "KCD", ["F"], ["D"]);
    tester.Test("a", "LBF", ["C", "D", "K"], ["L", "B", "F"]);
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryJ
EntryA
EntryK
EntryB
EntryD
[KBD]
Ok
Processing a 'b' 
ExitB
EntryC
[KCD]
Ok
Processing a 'b' 
ExitC
EntryB
[KBD]
Ok
Processing a 'c' 
ExitD
EntryF
[KBF]
Ok
Processing a 'c' 
ExitF
EntryD
[KBD]
Ok
Processing a 'a' 
ExitB
ExitD
ExitK
EntryL
EntryC
EntryF
[LCF]
Ok
Processing a 'c' 
ExitF
EntryD
[LCD]
Ok
Processing a 'a' 
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[KBF]
Ok
Processing a 'b' 
ExitB
EntryC
[KCF]
Ok
Processing a 'a' 
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[LBD]
Ok
Processing a 'c' 
ExitD
EntryF
[LBF]
Ok
Processing a 'a' 
ExitB
ExitF
ExitL
EntryK
EntryC
EntryD
[KCD]
Ok
Processing a 'c' 
ExitD
EntryF
[KCF]
Ok
Processing a 'a' 
ExitC
ExitF
ExitK
EntryL
EntryB
EntryD
[LBD]
Ok
Processing a 'b' 
ExitB
EntryC
[LCD]
Ok
Processing a 'a' 
ExitC
ExitD
ExitL
EntryK
EntryB
EntryF
[KBF]
Ok
Processing a 'b' 
ExitB
EntryC
[KCF]
Ok
Processing a 'c' 
ExitF
EntryD
[KCD]
Ok
Processing a 'a' 
ExitC
ExitD
ExitK
EntryL
EntryB
EntryF
[LBF]
Ok
END-OUTPUT
*/
