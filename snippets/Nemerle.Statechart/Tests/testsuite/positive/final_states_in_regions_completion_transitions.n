using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using Nemerle.Statechart;

using System.Collections.Generic;
using System.Linq;

  /// <summary>
  /// Description of junction_example.
  /// </summary>
  [statechart(
  <#
  flags testing;

  // flags debug;

  name "final states in regions, completion transitions";
  
  region A
  {
    _ => E;
      
    state B
    {
      a => C;
      b => C;
    }
     
    state C
    {
      a => B;
      b => B;
      d => $0;
    }
     
  } and
  {
    state D
    {
      a => F;
      c => F;
      f => E;
    }
     
    state F
    {
      a => D;
      c => D;
      d => $0;
      e => $0;
    }
  }
   
  state E
  {
    a => A;
  }
    
  #>)]
  public class example
  {
  }



module Test
{
  Main() : void
  {
    def fsm = example();
    def tester = fsm.GetTester();
    tester.ConsoleTestInit();
    tester.Initiate("BD", ["A", "B", "D"]);
    tester.Test("a", "CF", ["B", "D"], ["C", "F"]);
    tester.Test("d", "E", "ExitC", "ExitF", "EntryASubRegion0Final", "EntryASubRegion1Final", "ExitASubRegion1Final", "ExitASubRegion0Final", "ExitA", "EntryE");
    tester.Test("a", "BD", ["E"], ["A", "B", "D"]);
    tester.Test("b", "CD", ["B"], ["C"]);
    tester.Test("d", "ASubRegion0FinalD", ["C"], ["ASubRegion0Final"]);
    tester.Test("c", "ASubRegion0FinalF", ["D"], ["F"]);
    tester.Test("d", "E", "ExitF", "EntryASubRegion1Final", "ExitASubRegion1Final", "ExitASubRegion0Final", "ExitA", "EntryE");
    tester.Test("a", "BD", ["E"], ["A", "B", "D"]);
    tester.Test("c", "BF", ["D"], ["F"]);
    tester.Test("b", "CF", ["B"], ["C"]);
    tester.Test("a", "BD", ["C", "F"], ["B", "D"]);
    tester.Test("a", "CF", ["B", "D"], ["C", "F"]);
    tester.Test("a", "BD", ["C", "F"], ["B", "D"]);
    tester.Test("f", ["D", "B", "A"], ["E"]);
    tester.Test("a", "BD", ["E"], ["A", "B", "D"]);
    tester.Test("b", "CD", ["B"], ["C"]);
    tester.Test("d", "ASubRegion0FinalD", ["C"], ["ASubRegion0Final"]);
    tester.Test("c", "ASubRegion0FinalF", ["D"], ["F"]);
    tester.Test("e", "E", "ExitF", "EntryASubRegion1Final", "ExitASubRegion1Final", "ExitASubRegion0Final", "ExitA", "EntryE");
    fsm.Terminate();
  }
}

/*
BEGIN-OUTPUT
EntryA
EntryB
EntryD
[BD]
Ok
Processing a 'a' 
ExitB
ExitD
EntryC
EntryF
[CF]
Ok
Processing a 'd' 
ExitC
ExitF
EntryASubRegion0Final
EntryASubRegion1Final
ExitASubRegion1Final
ExitASubRegion0Final
ExitA
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryA
EntryB
EntryD
[BD]
Ok
Processing a 'b' 
ExitB
EntryC
[CD]
Ok
Processing a 'd' 
ExitC
EntryASubRegion0Final
[ASubRegion0FinalD]
Ok
Processing a 'c' 
ExitD
EntryF
[ASubRegion0FinalF]
Ok
Processing a 'd' 
ExitF
EntryASubRegion1Final
ExitASubRegion1Final
ExitASubRegion0Final
ExitA
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryA
EntryB
EntryD
[BD]
Ok
Processing a 'c' 
ExitD
EntryF
[BF]
Ok
Processing a 'b' 
ExitB
EntryC
[CF]
Ok
Processing a 'a' 
ExitC
ExitF
EntryB
EntryD
[BD]
Ok
Processing a 'a' 
ExitB
ExitD
EntryC
EntryF
[CF]
Ok
Processing a 'a' 
ExitC
ExitF
EntryB
EntryD
[BD]
Ok
Processing a 'f' 
ExitD
ExitB
ExitA
EntryE
[E]
Ok
Processing a 'a' 
ExitE
EntryA
EntryB
EntryD
[BD]
Ok
Processing a 'b' 
ExitB
EntryC
[CD]
Ok
Processing a 'd' 
ExitC
EntryASubRegion0Final
[ASubRegion0FinalD]
Ok
Processing a 'c' 
ExitD
EntryF
[ASubRegion0FinalF]
Ok
Processing a 'e' 
ExitF
EntryASubRegion1Final
ExitASubRegion1Final
ExitASubRegion0Final
ExitA
EntryE
[E]
Ok
END-OUTPUT
*/
