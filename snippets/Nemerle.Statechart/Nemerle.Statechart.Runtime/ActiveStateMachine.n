using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections.Concurrent;
using System.Threading;
//using System.Threading.Tasks;

namespace Nemerle.Statechart
{
  public class CompletionEvent : HsmEvent
  {
    mutable static instance : HsmEvent;

    public static New : HsmEvent
    {
      get
      {
        when (instance == null) 
        {
          instance = CompletionEvent();
        }
        instance
      }
    }

    public override Name : string
    {
      get
      {
        "Completion"
      }
    }

    public override FullName : string
    {
      get
      {
        Name
      }
    }
  }

  /// <summary>
  /// Description of Implementation.
  /// </summary>
  public abstract class ActiveStateMachine[TState] : StateMachine[TState], IActiveStateMachine where TState : HsmState
  {

    public ManualRoute : bool {get;set; default false}

    public this()
    {
      queue_thread = Thread(QueueThread)
    }

    public abstract Events : IEnumerable[HsmEvent] {get;}

    Messenger : FsmMessenger = FsmMessenger.Instance;

    protected virtual Subscribe() : void
    {
      Messenger.Subscribe(Events, this);
      Messenger.Init(ManualRoute);
    }

    protected virtual Unsubscribe() : void
    {
      Messenger.Unsubscribe(this)
    }

    public Initiate() : void
    {
      _ = work_event.Reset();
      TrySwitch(Initial());
      queue_thread.Start();
      Subscribe();
    }

    queue : ConcurrentQueue[HsmEvent] = ConcurrentQueue();

    mutable queue_thread : Thread;

    work_event : ManualResetEvent = ManualResetEvent(false);

    public abstract PostEvent(evt : string) : void;

    public PostEvent(evt : HsmEvent) : void
    {
      queue.Enqueue(evt);
      _ = work_event.Set();
    }

    protected abstract DoActivityStop() : void;

    public override Terminate() : void
    {
      Unsubscribe();
      DoActivityStop();
      _ = work_event.Set();

      base.Terminate();
      queue_thread.Abort();
      when (Thread.CurrentThread != this.queue_thread : object)
      {
        queue_thread.Join();
      }

    }

    protected Completion() : void
    {
      completion = true;
      _ = work_event.Set();
    }
    
    CheckCompletion() : bool
    {
      if (completion) 
      {
        completion = false;
        Dispatch(CompletionEvent.New);
        true
      } else false
    }
    
    CheckQueue(queue : ConcurrentQueue[HsmEvent]) : bool
    {
      mutable item;
      if (queue.TryDequeue(out item))
      {
        Dispatch(item);
        true
      } else false
    }
    
    QueueThread() : void
    {
      try 
      {
        while (true)
        {
          if (CheckCompletion()) () else
          if (CheckQueue(queue)) ()
          else
          {
            _ = work_event.Reset();
            _ = work_event.WaitOne();
          }
        }
      }
      catch
      {
        | _ is ThreadAbortException => ()
        | _                         => throw
      }
    }

  }
}
