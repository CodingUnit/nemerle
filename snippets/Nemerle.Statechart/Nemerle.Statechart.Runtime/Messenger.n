using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{

  class EventComparer : IEqualityComparer[HsmEvent]
  {
    public Equals(a : HsmEvent, b : HsmEvent) : bool
    {
      a.GetHashCode() == b.GetHashCode()
    }

    public GetHashCode(obj : HsmEvent) : int
    {
      obj.GetHashCode()
    }
  }

  /// <summary>
  /// Description of Messenger.
  /// </summary>
  public class FsmMessenger
  {
    map   : Hashtable[HsmEvent, list[IActiveStateMachine]] = Hashtable(EventComparer());
    route : Hashtable[HsmEvent, list[HsmEvent]] = Hashtable(EventComparer());

    public Init(manual_route : bool = false) : void
    {
      when (!manual_route) MergeSimilarNames();
    }

    public MergeSimilarNames() : void
    {
      def group = map.DuplicatesGroup(x => x.Key.Name);

      foreach (val in group)
      {
        def lst = val.Map(_.Key);
        foreach (v in lst)
        {
          def lst = lst.Except(v);
          AddRoute(v, lst)
        }
      }
    }

    public Subscribe(ev : IEnumerable[HsmEvent], mach : IActiveStateMachine) : void
    {
      foreach (e in ev) Subscribe(e, mach)
    }

    public Subscribe(ev : HsmEvent, m : IActiveStateMachine) : void
    {
      if (map.ContainsKey(ev))
      {
        def val = map[ev];
        map[ev] = m :: val;
      } else
      {
        map[ev] = m :: []
      }
    }

    public Unsubscribe(ev : HsmEvent, m : IActiveStateMachine) : void
    {
      when (map.ContainsKey(ev))
      {
        def res = map[ev];
        def res = res.Except(m);
        map[ev] = res.NToList();
      }
    }

    public Unsubscribe(mach : IActiveStateMachine) : void
    {
      foreach (item in map.NToList())
      {
        def val = item.Value;
        when (val.Contains(mach)) 
        {
          def val = val.Except(mach);
          if (val.IsEmpty()) 
          {
            RemoveRoute(item.Key);
            map.Remove(item.Key);
          } else map[item.Key] = val.NToList();
        }
      }
    }

    public AddRoute(ev : HsmEvent, m : IEnumerable[HsmEvent]) : void
    {
      if (route.ContainsKey(ev))
      {
        def res = route[ev];
        def res = res.Exclude(m.NToList(), (x, y) => x.Name == y.Name);
        def res = res.Concat(m);
        route[ev] = res.NToList();
      } else
      {
        route[ev] = m.NToList()
      }
    }

    public AddRoute(ev : HsmEvent, m : HsmEvent) : void
    {
      when (!ev.Equals(m)) 
        if (route.ContainsKey(ev))
        {
          def res = route[ev];
          when (!res.Exists(x => x.Equals(m)))
          {
            route[ev] = m :: res;
          }
        } else
        {
          route[ev] = m :: [];
        }
    }

    public RemoveRoute(ev : HsmEvent, m : HsmEvent) : void
    {
      when (route.ContainsKey(ev))
      {
        def res = route[ev];
        route[ev] = res.Except(m).NToList();
      }
    }

    public RemoveRoute(ev : HsmEvent) : void
    {
      foreach (r in route.NToList())
      {
        when (r.Value.Contains(ev)) 
        {
          def val = r.Value.Except(ev);
          if (val.IsEmpty()) route.Remove(r.Key) else route[r.Key] = val.NToList();
        }
      }
    }

    public static Instance : FsmMessenger = FsmMessenger();

    PostInternal(ev : HsmEvent) : void
    {
      when (map.ContainsKey(ev))
      {
        def res = map[ev];
        foreach (m in res)
        {
          m.PostEvent(ev)
        }
      }
    }

    public Post(ev : HsmEvent) : void
    {
      PostInternal(ev);
      when (route.ContainsKey(ev))
      {
        def ev = route[ev];
        foreach (e in ev)
        {
          PostInternal(e)
        }
      }
    }
  }
}
