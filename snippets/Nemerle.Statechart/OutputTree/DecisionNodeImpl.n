using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  using ListUtils;
  using GuardNode;

  /// <summary>
  /// Description of DecisionNodeImpl.
  /// </summary>
  public partial variant DecisionNode
  {

    public static create_decision_tree(target : HPseudoState.Junction, _tr : HTransition) : void
    {
      
      def create_tree(node, a)
      {
        match (node)
        {
          | HJunctionNode.Node(actions = act, guard = g, nodes = n, state = st) => 
              Some(DecisionNode.Condition(act, null, st, null, g, n.FoldBack(None(), create_tree).WithDefault(null), a))
          | Target(actions = act, target = t, state = st) => Some(DecisionNode.Target(act, null, st, null, t, null))
        }
      } 

      def check_prepare(n)
      {
        | HJunctionNode.Target(guard = GuardNode.Else) as n => n.guard = GuardNode.Empty();
                                                               n
        | HJunctionNode.Target(guard = GuardNode.Expr as g) as n => 
            n.guard = GuardNode.Empty();
            HJunctionNode.Node(g, [], n.state, [n])
        | _ => n
      }

      def tree = target.tree;
      // check tree nodes and prepare
      foreach (HJunctionNode.Node(nodes = n) as node in tree.GetBreadthFirstEnumerable())
      {
        def n = n.Map(check_prepare);
        node.nodes = n;
      }

      //def exists = tree.GetBreadthFirstEnumerable().Exists(x => x.state : object != target.state);
      //def source = (tr.Source :> HTarget.State);
      //// if junction not in super of transition, or cross state, need run actions not at end, but in each segment
      //when (source.state.automaton == null || source.state.automaton.super : object != target.state || exists)
      //{
      //  // move guards to targets
      //  foreach (HJunctionNode.Node(guard = g) as n in tree.GetBreadthFirstEnumerable())
      //  {
      //    foreach (sub in n.nodes)
      //    {
      //      sub.guard = g + sub.guard;
      //      n.guard   = GuardNode.Empty();
      //    }
      //  }
      //}

      // move actions to targets
      //foreach (HJunctionNode.Node(actions = a) as n in tree.GetBreadthFirstEnumerable())
      //{
      //  foreach (sub in n.nodes)
      //  {
      //    sub.actions = a + sub.actions;
      //    n.actions   = [];
      //  }
      //}

      def tree = create_tree(target.tree, None()).WithDefault(null);
      // set parents
      tree.Prepare();
      
      def tree = if (tree is DecisionNode.Condition(condition = GuardNode.Empty, actions = [], else_node = None, body = b)) b else tree;
      target.decision_tree = tree
    }

  }
}
