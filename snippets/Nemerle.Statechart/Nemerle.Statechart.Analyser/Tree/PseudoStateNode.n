using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  using FsmState;
  using ListUtils;


  [Record]
  variant PseudoStateNode : Located, IEquatable[PseudoStateNode]
  {
    | Initial 
      { 
        tran : StateTransition;
        
        this(st : FsmState, tran : StateNode.Transition)
        {
          base(0, st);
          this.tran = StateTransition(this,TransitionEvent.Completion, tran);
          this.tran.kind = TransitionKind.Local;
        }

        this(st : FsmState, tostate : FsmState)
        {
          base(0, st);
          this.tran = StateTransition(this, tostate, TransitionKind.Local)
        }
      }
    | History 
      {
        public this(st : FsmState, hist : PseudoStateModelNode.History)
        {
          base(0, st);
          type = hist.type;
          default = hist.default.Map(x => StateTransition(st, TransitionEvent.Completion, x))
        }

        public SimpleName : string
        {
          get
          {
            $"$(state)History"
          }
        }        

        public default : option[StateTransition] {get;set;}

        public type : HistoryType;
      }
    | Junction
      {
        name : string;
        tree : FsmJunctionNode;
        type : JunctionType;

        decision_tree : DecisionNode {get;set;}
        IsUnnamed : bool;
        
        public static GetUnnamedName(this an : FsmAnalyser, type : JunctionType) : string
        {
          match (type) 
          {
            | JunctionType.Choice   => def num = an.NextChoiceNum();
                                       $"UnnamedChoice$num"
            | JunctionType.Junction => def num = an.NextJunctionNum();
                                       $"UnnamedJunction$num"
            | _                     => throw NotImplementedException()
          }
        }
        
        this(st : FsmState, node : PseudoStateModelNode.Junction)
        {
          base(0, st);
          def an = st.analyser;
          name = match (node) 
          {
            | PseudoStateModelNode.Junction(name = null, type = t) => IsUnnamed = true;
                                                                      GetUnnamedName(an, t);
            | Junction(name = n)                                   => n
          }
          
          tree = FsmJunctionNode.Create(this, node.nodes);
          type = node.type;
          //Junction(st, name, tree, node.type, unnamed)
        }

        

        override ToString() : string
        {
          Name
        }

      }
      
    | Fork 
      {
        target    : list[TransitionTarget] {get;set;}
        //fork_tran : list[StateTransition] {get;set;default []}
      }
    | Join 
      {
        name : string;
        joined_states : list[FsmState] {get;set;default []}
        transition : StateTransition {get;set;}

        this(st : FsmState, node : PseudoStateModelNode.Join)
        {
          base(0, st);
          name = node.name;
          transition = StateTransition(this, null, TransitionKind.External);
          def tran = node.tran;
          transition.To = TransitionTarget.Create(st, tran.to);
          transition.guard = tran.guard;
          transition.action = tran.action.MapDefault(x => x.actions, []);
        }
      }
    | EntryPoint 
      { 
        name : string; 
        tran : StateTransition;
        
        this(st : FsmState, node : PseudoStateModelNode.EntryPoint)
        {
          base(0, st);
          tran = StateTransition(this, TransitionEvent.Completion, node.tran);
          this.name = node.name;
        }
      }
      
    | ExitPoint 
      { 
        name : string; 
        tran : option[StateTransition] {get;set;default None()} 
        
        this(st : FsmState, node : PseudoStateModelNode.ExitPoint)
        {
          base(0, st);
          tran = node.tran.Map(StateTransition(this, TransitionEvent.Completion, _));
          this.name = node.name;
        }
      }
      
    | Terminate

    public static Create(st : FsmState, pseudo : PseudoStateModelNode) : PseudoStateNode
    {
      def npseudo = match (pseudo)
      {
        | Initial(tr)                                => Initial(st, tr)
        | History as hist                            => History(st, hist)
        | Junction as j                              => Junction(st, j)
        | EntryPoint as e                            => EntryPoint(st, e)
        | ExitPoint as e                             => ExitPoint(st, e)
        | Terminate                                  => Terminate(0, st)
        | Fork(tar)                                  => Fork(0, st, tar.Map(x => TransitionTarget.Create(st, x)))
        | Join as e                                  => Join(st, e)
      }
      npseudo.Location = pseudo.Location;
      npseudo
    }

    copy_name : string
    {
      get
      {
        if (copy == 0) "" else $"$copy"
      }
    }

    public copy : int {get;set;default 0}
    
    public state : FsmState {get;set;}

    public NativeName : option[string]
    {
      get
      {
        match (this)
        {
          | Join(name = null)   => None()
          | Join(name = n)
          | Junction(name = n, IsUnnamed = false) 
          | EntryPoint(name = n)
          | ExitPoint(name = n) => Some(n)
          | _                   => None()
        }
      }
    }

    public Equals(b : PseudoStateNode) : bool
    {
      this : object == b
    }
    
    public override GetHashCode() : int
    {
      Name.GetHashCode()
    }
    
    public Name : string
    {
      get
      {
        def name = match (this)
        {
          | PseudoStateNode.History(type = t) => 

              def type = match (t)
                          {
                            | HistoryType.Deep     => "Deep"
                            | Shallow              => "Shallow"
                            | None                 => ""
                          }

              if (state != null)
              {
                if (state.history.IsOne) $"$(state)History" else $"$(state)$(type)History"
              } else "History";
          | Join(name = null) as j    => $<#Join..$(j.joined_states;"_")To$(j.transition.To)#>//$copy_name
          | Join(name = n)            => $"Join$n"//$copy_name
          | PseudoStateNode.Terminate => $"$(state)Terminate"
          | Fork(target = t)          => $<#Fork$(state)To..$(t;"_")#>
          | Initial                   => $"$(state)Initial"
          | Junction(name = n)        => $"Junction$(n)At$state"
          | EntryPoint(name = n)      => $"EntryPoint$n"
          | ExitPoint(name = n)       => $"ExitPoint$n"
        }
        name + copy_name
      }
    }

    [Memoized]
    public ToHPseudo : HPseudoState
    {
      get
      {
        def st = state?.ToHState;
        match (this)
        {
          | Fork(target = t)    => HPseudoState.Fork(st, t.Map(x => x.ToState.ToHState))
          | History as p        => HPseudoState.History(st, p.default.Map(x => x.ToHTransition), p.type)
          | Join as p           => HPseudoState.Join(st, p.name, p.joined_states.Map(x => x.ToHState), null)
          | Junction as p       => HPseudoState.Junction(st, p.name, p.tree.ToHJunctionNode, p.type, null)
          | Terminate           => HPseudoState.Terminate(st)
          | _                   => null
        }
      }
    }
    
    public override ToString() : string
    {
      Name
    }

  }


}
