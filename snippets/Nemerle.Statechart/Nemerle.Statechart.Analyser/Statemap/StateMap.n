using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using System.ComponentModel;

using NC = Nemerle.Collections;


namespace Nemerle.Statechart
{
  using FsmState;


  //[Record]
  [NotifyPropertyChange]
  partial class StateMap : INotifyPropertyChanged
  {
    public messager : Messager
    {
      get
      {
        analyser.messager
      }
    }

    [Accessor]
    mutable state_tree : FsmState;

    public analyser : FsmAnalyser;

    [NotifyPropertyChange]
    [Memoized(state_tree)]
    public States : array[FsmState] 
    {
      get
      {
        state_tree.GetBreadthFirstEnumerable().ToArray()
      }
    }

    [NotifyPropertyChange]
    [Memoized(States)]
    public Transitions   : array[StateTransition] 
    {
      get
      {
        States.SelectMany(_.transitions).ToArray()
      }
    }

    [NotifyPropertyChange]
    [Memoized(States)]
    public PseudoStates : array[PseudoStateNode] 
    {
      get
      {
        States.SelectMany(_.pseudo_states).ToArray()
      }
    }

    public this(an : FsmAnalyser) 
    { 
      analyser = an;
    }

    StateMachinesInProj : list[string * StateNode.StateMachine]
    {
      get
      {
        analyser.StateMachinesInProj
      }
    }

    /// <summary>
    /// create super states setted with " : parent" syntax
    /// </summary>
    CreateSuperStates() : void
    {
      foreach (FsmState(state = StateNode.State(parent = Some(p))) as st in States)
      {
        match (p)
        {
          | "top" => st.MoveToNewSuper(state_tree)
          | n when n.Contains("[") => def sub = n.GetSub('[', ']');
                                      def name = n.GetSub('[');
                                      match (Get(st, name))
                                      {
                                        | null => messager.AddError(FsmError.ParentStateNotFound(st, name));
                                        | s    => mutable res;
                                                  if (int.TryParse(sub, out res))
                                                  {
                                                      while (s.sub_states.Length <= res)
                                                      {
                                                        def st = FsmState(analyser, StateType.SubRegion());
                                                        s.Add(st)
                                                      }
                                                    def s = s.sub_states.Nth(res);
                                                    st.MoveToNewSuper(s);
                                                  } else messager.AddError(FsmError.ParentStateNotFound(st, n));
                                      }
          | n     => match (Get(st, n))
                      {
                        | null => messager.AddError(FsmError.ParentStateNotFound(st, p));
                        | s    => st.MoveToNewSuper(s)
                      }
        }
      }
    }

    Bind(st : FsmState) : FsmState
    {
      st.ChangeBind("sub_states", _ => OnPropertyChanged("state_tree"));
      Transitions_memoized.Bind(st, "transitions");
      PseudoStates_memoized.Bind(st, "pseudo_states");
      st
    }

    public static CreateSub(an : FsmAnalyser, state : StateNode.StateMachine) : StateMap
    {
      def map = StateMap(an);
      map.CreateStateMachine(state);
      map.CreateSuperStates(); // check create super states setted with : parent syntax
      map.CreatePreDecls(true); // create and resolve pre declarations
      map
    }

    public CreateStateMachine(state : StateNode.StateMachine) : void
    {
      state_tree = TreeUtils.FoldTree(state.state, null, _.sub_states, (x, sb) => FsmState(analyser, x, sb) |> Bind)
    }

    /// <summary>
    /// create state tree map and specific structures, update references etc
    /// </summary>
    public Create(state : StateNode.StateMachine) : void
    {
      // fold general rose tree and convert it to FsmState general rose tree
      CreateStateMachine(state);
      CreateSuperStates(); // check create super states setted with : parent syntax
      CreateSubMachines(state);
      CreatePreDecls(); // create and resolve pre declarations

      UpdateReferences(); // resolve references
    }

  }
}
