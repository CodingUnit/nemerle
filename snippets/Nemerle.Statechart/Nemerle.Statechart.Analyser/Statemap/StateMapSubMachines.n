using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of StateMapSubMachines.
  /// </summary>
  partial class StateMap
  {
    
    public LoadedMachines : Hashtable[string, StateNode.StateMachine] {get;set;}
    
    public SubMachines : IEnumerable[FsmState]
    {
      get
      {
        States.Where(x => x.type is StateType.SubMachine)
      }
    }
    
    LoadUsings(fsm : StateNode.StateMachine) : void
    {
      def map = Hashtable();
      foreach (u in fsm.usings)
      {
        match (StateMachinesInProj.Find((x, _) => x == u.from))
        {
          | Some(t) => map.Add(t)
          | _       => messager.AddError(FsmError.StateMachineNotFound(u))
        }
      }
      LoadedMachines = map
    }
    
    CreateSubMachines(fsm : StateNode.StateMachine) : void
    {
      LoadUsings(fsm);
      foreach (st in SubMachines with i)
      {
        when (LoadedMachines.Values.Find(x => x.name == st.SubMachineType) is Some(loaded))
        {
          def map = StateMap.CreateSub(analyser, loaded);
          def state = map.state_tree;
          state.AllStates.Iter(x => _ = Bind(x));
          state.copy_num = i; // set copy num for every state machine
          state.AllPseudo.Iter(x => x.copy = i); // and its pseudo
          state.type = StateType.SubMachine(st.SubMachineType); // type is sub machine
          state.name = st.name; // copy name of source state
          state.DefineTransitions(st.transitions); // copy transitions
          state.transitions.Iter(x => x.From = state); // set state as in machine
          state.Attributes = st.Attributes; // copy attributes
          foreach (point in st.ExitPoints)
          {
            when (point.tran is Some(t)) // transition from declaration assign to exit point in imported sub machine
            match (state.ExitPoints.Find(x => x.name == point.name))
            {
              | Some(e) => t.From = state; // source and from machine state
                           t.Source = state;
                           t.FromPseudo = Some(e); // from pseudo exit point in machine state
                           e.tran = Some(t);
              | _       => messager.AddError(FsmError.PseudoStateNotFound(point.Name))
            }
          }
          st.Super.Replace(st, state) // replace state in tree
        }
      }
    }
  }
}
