using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  internal class Messager
  {
    Errors   : List[FsmError] = List();
    Warnings : List[FsmWarning] = List();

    
    public AddWarning(err : FsmWarning) : void
    {
      Warnings.Add(err);
    }

    public AddWarning(err : IEnumerable[FsmWarning]) : void
    {
      Warnings.AddRange(err);
    }

    public AddError(err : IEnumerable[FsmError]) : void
    {
      Errors.AddRange(err)
    }

    public AddError(err : FsmError) : void
    {
      Errors.Add(err)
    }

    public AddError(err : IEnumerable[ParseError]) : void
    {
      AddError(err.Map(x => FsmError.ParsingError(x)))
    }

    public ErrorMessages : list[Location * string]
    {
      get
      {
        Errors.Map(x => (x.Loc, x.Text))
      }
    }

    public WarningMessages : list[Location * string]
    {
      get
      {
        Warnings.Map(x => (x.Loc, x.Text))
      }
    }
  
  }

  /// <summary>
  /// Description of Errors.
  /// </summary>
  public partial class FsmAnalyser
  {
    internal messager : Messager = Messager();
    
    public ErrorMessages : list[Location * string]
    {
      get
      {
        messager.ErrorMessages
      }
    }
    
    public WarningMessages : list[Location * string]
    {
      get
      {
        messager.WarningMessages
      }
    }
    
    CheckParseErrors() : void
    { 
      def check_err(err)
      {
        match (err)
        {
          | StateNode.Error(StateNode.DoActivity as node) => ParseError.DuplicateActivity(node)
          | StateNode.Error(node)                         => ParseError.UnknownElement(node)
        }
      }

      def flags = Fsm.flags.errors.Select(x => ParseError.UnknownMachineFlag(x));// |> ParseError.UnknownMachineFlag(_);
      def err = Fsm.GetErrors().Select(check_err);
      def errs = err.Concat(flags);
      messager.AddError(errs)
    }

    public BreakIfError() : void
    {
      when (!messager.ErrorMessages.IsEmpty()) throw FsmErrorException()
    }


  }
}
