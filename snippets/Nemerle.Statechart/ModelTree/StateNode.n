// statenode.n
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using SCG = System.Collections.Generic;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{


  public variant StateType
  {
    | State
    | Final
    | SubMachine { type : string; }
    | SubRegion
    | Region
  }

  public enum TransitionKind
  {
    | Internal
    | Local
    | External
    | Initial
  }

  [Record]
  public variant StateNode : LocatedNode
  {
    | Flags
      {
        flags : MachineFlags;
      }

    | Name { name   : string; }
    | Using { name : string; from : string;}
    | StateMachine
      {
        flags : MachineFlags;
        [NeedChange]
        name  : string;
        state : State;
        usings : list[Using] = [];

        GetErrors() : IEnumerable[Error]
        {
          TreeUtils.Fold(state, [], _.sub_states, (x, a) => a.Concat(x.errors));
          //StateParts.SelectMany(_.errors)
        }
      }

    | State
      {
        this(pos : int, n : string, type : StateType) { base(pos);name = n; this.type = type; }
        
        name          : string;
        parent        : option[string] = None();
        attributes    : list[StateAttribute] = [];
        entry         : list[Entry] = [];
        exit          : list[Exit] = [];
        transitions   : list[Transition] = [];
        do_activity   : list[DoActivity] = [];
        defer         : list[TransitionEvent] = [];
        sub_states    : list[State] = [];
        pseudo_states : list[PseudoState] = [];
        type          : StateType;
        errors        : list[Error] = [];

      }

    | Entry
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Exit
      {
        attrib : ActionFlags;
        action : Actions;
      }
    | Defer
      {
        evt : list[TransitionEvent];
      }
    | Error {node : StateNode;}
    | DoActivity {action : Actions;flags : ActivityFlag;}
    | Transition
      {
        from   : list[NameIdentifier];
        evt    : list[TransitionEvent] = [];
        guard  : GuardNode;
        action : option[Actions];
        to     : TargetType;
        kind   : TransitionKind;
      }
    | PseudoState
      {
        node : PseudoStateModelNode;
      }

    | Region

  }

}
