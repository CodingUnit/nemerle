using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;


namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratePseudo.
  /// </summary>
  public partial class StaticGenerator
  {
    
    get_junction_body(node : DecisionNode) : PExpr
    {

      def loop(n)
      {
        
        | DecisionNode.Condition(g, b) as n =>
        
          def check = GetGuards(g);
          def e = n.else_node;
          def act = GetPath(n.path);
          def body = loop(b);
          match (g)
          {
            | GuardNode.Empty => body
            | _               => 
                    match (e)
                    {
                      | Some(e) => def els = loop(e);
                                   <[ if ($check) 
                                      {
                                        $act;
                                        $body;
                                      } else 
                                      {
                                        $els
                                      } ]>
                      | _       => <[ if ($check) $body else null ]>
                    }
                    
          }
          
         | Target(destination = d, path = seq) => 
            def act = GetPath(seq);
            def target = GetDestination(d);
            <[
              $act;
              $target;
            ]>
      }
      
      loop(node)
    }

    DefineHistory() : void
    {
      def hist = GenHistory(this, HistoryPaths, HistoryStates);
      hist.Define()
    }

    DefinePseudo() : void
    {
      //def get_join(j, a)
      //{
      //  match (j)
      //  {
      //    | Join(name = n) => 

      //        def fname = $"join$n";
      //        <[ decl: mutable $(fname : usesite) : int; ]> :: a
      //    | _ => a
      //  }
      //}

      //def pseudo = analyser.PseudoStates;
      //def defs = pseudo.FoldLeft([], get_join);
      //Define(defs);
    }

  }
}
