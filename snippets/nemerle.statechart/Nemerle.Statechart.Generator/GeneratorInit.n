using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Compiler.Parsetree;
using Nemerle.Statechart;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Threading;
using Nemerle.Compiler;

namespace Nemerle.Statechart
{
  /// <summary>
  /// Description of GeneratorInit.
  /// </summary>
  public partial class StaticGenerator
  {
    DefineMain() : void
    {
      def initial = DefineTransBody(Initial); // define initial transition
      def events = Events.Map(x => x.CreateExpr());
      def state_names = $[(st.name, $"State$(st)"), st in ActiveStates]; // создаем имена состояний
      def cons_expr = constructor.MapDefault(x  => <[ $(x : usesite)(); ]>, <[ () ]>);
      def prop_st_change_expr = if (FsmFlags.PropertyStateChanged) <[ OnPropertyChanged("CurState") ]> else <[ () ]>;
      when (HasDeferedEvents || FsmFlags.PropertyStateChanged)
      {
        def defer_check = if (HasDeferedEvents) DeferrableEvents.CheckCode() else <[]>;
        def expr = <[decl: 
                      // define method for changing state
                    protected override OnSwitch() : void
                    {
                        $prop_st_change_expr;
                        $defer_check;
                    }
                   ]>;
        Define(expr)
      }
      
      //def base_ctor = <[ base($HasDeferedEvents) ]>;
      def dummy =  <[decl:
                  class Test
                  {
                    // define constructor
                    public this()
                    {
                        //$base_ctor;
                        // constructor body
                        {..$init_exprs}
                        $cons_expr;
                        //events = $events_expr;
                    }
                    
                    public static events : array[HsmEvent] = array[..$events];
                    
                    public override Events : IEnumerable[HsmEvent]
                    {
                      get
                      {
                        events
                      }
                    }
                    
                    protected override Initial() : State
                    {
                      $initial
                    }

                    //public static ContainsStates : array[string] = array[..$states];
                    //public static ProcessEvents  : array[string] = array[..$events];
                    //public static ExecActions    : array[string] = array[..$actions];

                  }

                  ]>;
      ty.AddImplementedInterface(<[ ActiveStateMachine[State] ]>);
      when (FsmFlags.TestingFeatures) ty.AddImplementedInterface(<[ Nemerle.Statechart.ITestStateMachine ]>);
      Define(state_names.Map((x, y) =>  <[decl: public static $(y : usesite) : State.$(x : usesite) = State.$(x : usesite)(); ]>)); // create state variables for fast using 
      Define(dummy.td.GetMembers());
    }

    /// <summary>
    /// Define initial class structure
    /// </summary>
    DefineInit() : void
    {
      DefineMain();
      DefineStates(); // define states
      DefineIsInState();
      DefineTerminate();
      DefineTesting();
    }

    DefineTerminate() : void
    {
      def stop_body = DoActivities.Map(GenActivity.StopCode);
      def terminate = <[ decl: protected override DoActivityStop() : void
                        {
                          ..$stop_body
                        }
                      ]>;
      Define(terminate);
    }

    DefineIsInState() : void
    {
      def create_comp_expr(st_id)
      {
        def comp = ListUtils.Init(StatesId.Length, i => <[ cur_id.$($"id$i" : usesite) & id.$($"id$i" : usesite) == id.$($"id$i" : usesite) ]>);
        def expr = MergeExpr(comp, (x, y) => <[ $x && $y ]>);
        <[
        def id = $st_id;
          def cur_id = cur_state.get_id();
          $expr
        ]>
      }

      def get_body(st_id)
      {
        if (StatesId.IsSimple)
        {
          match (st_id)
          {
            | <[ $(_ : usesite) ]> => <[ cur_state.get_id() & id == id ]>
            | _ => <[
                def id = $st_id;
                      cur_state.get_id() & id  == id 
                  ]>
          }
        } else
        {
          def ids = StatesId;
          def names = ListUtils.Init(ids.Length, i => $"id$i");
          def mem = if (ids.IsStruct)
                     {
                       def ids = names.Map(x => <[decl: public $(x : usesite) : uint; ]>);
                       def vars = names.Map(x => <[parameter: $(x : usesite) : uint]>);
                       def assign = names.Map(x => <[ this.$(x : usesite) = $(x : usesite)]>);
                       def ctor = <[decl: public this(..$vars)
                                                      {
                                                        ..$assign
                                                      }]>;
                       def ids = ctor :: ids;
                        <[decl: struct LongId
                          {
                          ..$ids
                          } ]>
                     } else
                     {
                       def ids = names.Map(x => <[decl: public mutable $(x : usesite) : uint; ]>);
                        <[decl: class LongId
                          {
                          ..$ids
                          }
                        ]>
                     }
          DefineNested(mem).Compile();
          create_comp_expr(st_id);
        }
      }
      def is_in_state = <[decl:
                public IsInState(st : State) : bool
                {
                  IsInState(st.get_id())
                }
            ]>;
      def id_type = StateIdType;
      def is_in_state2 = <[decl:
                public IsInState(id : $id_type) : bool
                {
                  $(get_body(<[ id ]>))
                }
            ]>;
      def st_is_in_state = <[decl: static IsInState(cur_state : State, st : State) : bool
                            {
                              $(get_body(<[ st.get_id() ]>))
                            }
                            ]>;

      def states = ActiveStates;//LivedNestedStates.Exclude(_.IsTopState);
      def mexpr = states.FoldRight([<[case: | _ => throw InvalidOperationException("Invalid state") ]>], 
                                   (x, a) => <[case: | $(x.name : string) => State.$(x.name : usesite).Id()]> :: a);
      def str_is_in_state = <[decl: public IsInState(st : string) : bool
                              {
                                def id = match (st) {..$mexpr };
                                IsInState(id)
                              } ]>;
      Define([is_in_state, is_in_state2, st_is_in_state, str_is_in_state]);
    }


    Init() : void
    {
      InitActionNames();
    }

    InitActionNames() : void
    {
      def action_for_name(macros)
      {
        |  <[ $_($name) ]>  => name.ToString()
        | _                 => macros.ToString()
      }

      def class_decls  =  ty.GetParsedMembers(false);
      method_decls = class_decls.Filter(_ is ClassMember.Function).Map(x => x.Name);
      def macros = class_decls.Map(x => (x.Name, x.ParsedAttributsAndModifiers.ParsedCustomAttributes));
      def macros = macros.Filter((_, x)  => !x.IsEmpty());
      macro_actions  =  Map(macros);
      decls = Map(class_decls.Map(x => (x.Name, x)));

      def declared = decls.Keys();
      def action_for_decls =  macros.FindSingleList(_ is <[ ActionFor($_) ]>);
      def event_for_decls =  macros.FindSingleList(_ is <[ EventFor($_) ]>);
      def guard_for_decls = macros.FindSingleList(_ is <[ GuardFor($_) ]>);
      constructor =  macros.FindSingle(_ is <[Constructor]>).Map(x => x[0]);

      def decl = declared.Map(x => (x, x)).NToList();
      def action = action_for_decls.Map((x, y) => (action_for_name(y), x));
      def evt = event_for_decls.Map((x, y) => (action_for_name(y), x));
      def methods = method_decls.Map(x => (x, x));
      action_for = Map(action + methods);
      event_for = Map(evt + methods);
      def guard = guard_for_decls.Map((x, y) => (action_for_name(y), x));
      def guard = guard + decl;
      def guard = guard.RemoveDuplicatesSort(((k1, _), (k2, _))  => k1.CompareTo(k2));
      guard_for = Map(guard);
    }

  }

}
