using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;
using Nemerle.Peg;
using Nemerle;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using Nemerle.Statechart;
using Nemerle.Compiler.Parsetree;
using System.Text;
using System.IO;

namespace Nemerle.Statechart
{

  using StateNode;
  using PseudoStateModelNode;

  [PegGrammar(Options  =  EmitDebugSources, stateMachine,
  grammar
  {
      any                                             = ['\u0000'..'\uFFFF'];
      newLine                                         = "\r\n" / '\n' / '\r' / '\u2028' / '\u2029' / '\u0085';
      singleLineComment                               = "//" (!('\n' / '\r') [Any])* newLine?;
      delimitedComment                                = "/*" (!"*/" [Any])* "*/";
      comment                                         = singleLineComment / delimitedComment;
      space_def                                       = ' ' / '\t' / '\u000B' / '\u000C' / newLine / comment;
      spaces_def                                      = space_def*;
      spaces : void                                   = spaces_def;
      letter                                          = [Lu,  Ll,  Lt,  Lm,  Lo,  Nl,  Nd] / '_' / '-' / '@' / '*' / '$';
      delimiter : void                                = ',' / space_def+;
      s : void                                        = spaces;
      
      qualified_id                                    = (letter / '.')+;
      target_id                                       = identifier;//target_letter+;
      numeric                                         = [Nl,  Nd]+;

      goto        : void                              = "=>"s;

      local_goto                                      = "(=>"s;
      ext_goto                                        = ")=>"s / "=>"s;
      any_goto                                        = local_goto / ext_goto;

      equal      : void                               = '='s;
      open_round_brace : void                         = '('s;
      close_round_brace : void                        = ')'s;
      // terminal rules
      // guards

      identifier                                      = letter+;
      identifier_string  : string                     = identifier;
      comma_identifier   : string                     = '\"' (!'\"' [Any])+ '\"'s;
      else_guard         : GuardNode                  = "else"s;
      guard_type         : GuardNode                  = else_guard / expr_guard;
      syntax_delim       : void                       = (':' / '=') s;

      guard_expr         : PExpr                      = (!(']' / goto) [Any])+ s;
      long_guard_expr    : PExpr                      = "${"s (!"$}" [Any])+ "$}"s;
      guard              : GuardNode                  = '['s guard_type ']'s;
      expr_guard         : GuardNode                  = long_guard_expr / guard_expr;

      fully_qualified    : NameIdentifier             = target_id ('.'s target_id)* s;
      simple_attrs       : List[NToken]               = ('['s (identifier s (','s)?)+ ']'s)+;
      attributes         : List[StateAttribute]       = simple_attrs;

      // actions
      long_expr_action   : Actions                    = '/'s "${"s (!"}$" [Any])+ "}$"s;
      expr_act_action    : Actions                    = (long_expr_action / expr_action) ';'s;
      delim_action_list  : Actions                    = '/'s (!';' action delimiter?)+ s ';'s;

      empty_act_list     : Actions                    = ';'s;
      action_list        : Actions                    = empty_act_list / delim_action_list / expr_act_action;
      parameters         : List[string]               = (!close_round_brace identifier s (','s)?)*;
      empty_action       : FsmAction                  = '('s ')'s;
      //method_action      : FsmAction                  =  identifier s s (open_round_brace parameters close_round_brace);
      tran_action        : FsmAction                  = identifier s (open_round_brace parameters close_round_brace)?;
      action             : FsmAction                  = empty_action / tran_action;

      entry              : StateNode                  = simple_attrs? ("entry" / "$>")s action_list;
      exit               : StateNode                  = simple_attrs? ("exit" / "$<")s action_list;
      do_activity        : StateNode                  = simple_attrs? "do"s action_list;

      entry_point        : StateNode                  = entry_point_v1 / entry_point_v3 / entry_point_v2;
      entry_point_v1     : StateNode                  = "entry:"s identifier s default_transition;
      entry_point_v2     : StateNode                  = identifier s ':'s default_transition;
      entry_point_v3     : StateNode                  = '('s identifier s ')'s default_transition;


      exit_point         : StateNode                  = exit_point_decl ext_trans_body? (';'s)?;
      exit_point_decl    : NameIdentifier             = ("exit:" / exit_point_v2_head) s identifier s;
      exit_point_v2_head                              = '('s ('X' / 'x')s ')';
      machine_exit_point : StateNode                  = exit_point_decl ext_trans_body;

      terminate_node     : StateNode                  = ("terminate" / "X" / "x") s ';'s;
      initial            : StateNode                  = ("initial" / '0') s guard? ext_trans_act_list simple_target;
      pseudo_state       : StateNode                  = initial / history / entry_point / exit_point / terminate_node / join / junction / choice / merge;
      join               : StateNode                  = "join"s identifier s guard? ext_trans_act_list transition_target;

      // junction
      junction           : StateNode                  = "junction"s identifier s junction_body;
      junc_tran_body     : StateNode.Transition       = guard_type? ext_trans_act_list transition_target;
      junction_body      : List[JunctionNode]         = "{"s (!'}' junc_tran_body)+ "}"s;
      junction_target    : TargetType                 = junction_body;
      choice             : StateNode                  = "choice"s identifier s '$'? junction_body;
      choice_target      : TargetType                 = '$' junction_body;
      merge              : StateNode                  = "merge"s identifier s junc_tran_body;

      relocate_pseudo_tran : StateNode.Transition     = fully_qualified ":"s default_transition;
      relocate_st_tran   : StateNode.Transition       = fully_qualified ":"s normal_transition;
      join_alt_tran      : StateNode.Transition       = fully_qualified "("s identifier (!')' delimiter s identifier)* ")"s ":"s ext_transition;
      join_relocate_tran : StateNode.Transition       = "("s fully_qualified (!')' delimiter s fully_qualified)* ")"s ":"s ext_transition;
      join_rel_tran      : StateNode.Transition       = join_relocate_tran / join_alt_tran;
      relocate_tran      : StateNode.Transition       = join_rel_tran / relocate_st_tran / relocate_pseudo_tran;

      exit_point_target  : TargetType                 = exit_point_decl ';'s;
      
      qualified_target   : TargetType                 = fully_qualified ';'s;
      simple_target      : TargetType                 = exit_point_target / qualified_target;
      fork_trans_target  : TargetType                 = fully_qualified delimiter s fully_qualified (!';' fully_qualified delimiter s)* ';'s;
      fork_alt_target    : TargetType                 = fully_qualified '('s identifier s (!')' delimiter s identifier s)* ')'s ';'s;
      fork_target        : TargetType                 = fork_alt_target / fork_trans_target;
      transition_target  : TargetType                 = choice_target / junction_target / fork_target / simple_target;

      expr_action        : Actions                    = '/'s (!(';' / any_goto) [Any])* s;
      expr_tran_action   : Actions                    = long_expr_action / expr_action;
      expr_ext_tran_action  : Actions                 = expr_tran_action ext_goto;
      expr_loc_tran_action  : Actions                 = expr_tran_action local_goto;

      empty_ext_act_list : Actions                    = ext_goto;
      empty_loc_act_list : Actions                    = local_goto;
      ext_trans_act_list : Actions                    = empty_ext_act_list / ext_act_list / expr_ext_tran_action;
      loc_trans_act_list : Actions                    = empty_loc_act_list / loc_act_list / expr_loc_tran_action;
      default_transition : StateNode.Transition       = ext_trans_act_list transition_target;// s end_symb?;
      ext_trans_body     : StateNode.Transition       = ext_trans_act_list transition_target;
      internal_trans     : StateNode.Transition       = events guard? action_list;
      deferrable_evts    : StateNode                  = events '/'s "defer"s ';'s;
      deferred_evts      : StateNode                  = "deferred"s '/'s events ';'s;
      defer              : StateNode                  = deferred_evts / deferrable_evts;

      ext_act_list       : Actions                    = '/'s (!ext_goto action s delimiter?)+ ext_goto;
      loc_act_list       : Actions                    = '/'s (!local_goto action s delimiter?)+ local_goto;

      events             : List[TransitionEvent]      = identifier s (!('[' / '=' / '/' / ';') ','s identifier s)* s;
      transitions        : List[StateNode.Transition] = ext_transition*;

      ext_transition_cnv : StateNode                  = ext_transition;
      ext_transition     : StateNode.Transition       = events guard? ext_trans_body;
      local_trans        : StateNode.Transition       = events guard? loc_trans_act_list transition_target;
      normal_transition  : StateNode.Transition       = internal_trans / local_trans / ext_transition;
      transition         : StateNode                  = relocate_tran / normal_transition;

      history_deep       : StateNode                  = "(H*)"s default_transition? (';'s)?;
      history_shallow    : StateNode                  = "(H)"s default_transition? (';'s)?;
      history_short      : StateNode                  = history_deep / history_shallow;
      history_long       : StateNode                  = "history"s ':'s identifier s default_transition? (';'s)?;
      history            : StateNode                  = history_long / history_short;

      using_mach         : StateNode                  = "using"s identifier s fully_qualified ';'s;
      machine_decls      : StateNode                  = machine_exit_point / ext_transition_cnv;
      submachine         : StateNode                  = attributes? "submachine"s identifier s ('['s identifier s ']'s)? parent? '{'s machine_decls* '}'s;
      stateDecl          : StateNode                  = flags / name / using_mach / regions / pseudo_state / entry / exit / do_activity / defer / transition / state / submachine;// / inlined_fsm / statemachine;
      
      region_reference   : NameIdentifier             = fully_qualified '['s numeric s ']'s;
      parent             : NameIdentifier             = ':'s (region_reference / fully_qualified);
      state              : StateNode                  = attributes? "state"s identifier s parent? '{'s stateDecl* '}'s;

      regions            : StateNode                  = region_delim / empty_region / region;
      region_decls       : StateNode                  = regions / pseudo_state / entry / exit / do_activity / defer / transition / state / submachine;
      sub_region_decls   : StateNode                  = regions / pseudo_state / state / submachine;
      region_delim       : StateNode                  = '['s "---" '-'* ']'s;
      and_sub_region     : StateNode.State            = "and"s '{'s sub_region_decls* '}'s;
      empty_region       : StateNode                  = "region"s identifier s parent? '{'s '}'s;
      region             : StateNode                  = "region"s identifier s parent? '{'s region_decls* '}'s and_sub_region+;
      flags              : StateNode                  = "flags"s syntax_delim? (identifier s (','s)?)+ ';'s;
      name               : StateNode                  = "name"s syntax_delim? (identifier_string / comma_identifier) s ';'s;
      stateMachine       : StateMachine               = s stateDecl+ s;

  })]
  public partial class FsmParser
  {
    public env : GlobalEnv {get;set;}
    
    public flags_map : Hashtable[string, MachineFlag] {get;set;default Hashtable()}
  }

}


