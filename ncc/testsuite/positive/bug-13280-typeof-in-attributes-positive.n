using Nemerle.Collections;
using System;
using System.Collections.Generic;

module Program
{
  Main() : void
  {
    PrintClassNameAndTestAttributeValue.[TypeOfObject]();
    PrintClassNameAndTestAttributeValue.[TypeOfStringList]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericList]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntArray]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericArray]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntStringTuple]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericTuple]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntToIntFunc]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericFunc]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntIList]();
    PrintClassNameAndTestAttributeValue.[TypeOfGenericIList]();
    PrintClassNameAndTestAttributeValue.[TypeOfIntIntDictionaryList]();
    PrintClassNameAndTestAttributeValue.[TypeOfVoid]();
  }

  PrintClassNameAndTestAttributeValue[T]() : void 
  {
    def typeString(type : Type)
    {
      def args = type.GenericTypeArguments;
      if(args.Length > 0)
      {
        def argsStr = string.Join(", ", args.Map(typeString));
        $"$(type.Name)[$argsStr]"
      }
      else type.Name
    }
    def classType = typeof(T);
    def attrArgType = classType
      .GetCustomAttributes(false)
      .MapToArrayFiltered(_ is TestAttribute, _ :> TestAttribute)
      .NFirst()
      .Type;
    Console.WriteLine($"$(classType.Name) - $(typeString(attrArgType))");
  } 
}

[Test(typeof(Object))]
class TypeOfObject { }

[Test(typeof(List[string]))]
class TypeOfStringList { }

[Test(typeof(List[_]))]
class TypeOfGenericList { }

[Test(typeof(array[int]))]
class TypeOfIntArray { }

[Test(typeof(array[_]))]
class TypeOfGenericArray { }

[Test(typeof(int*string))]
class TypeOfIntStringTuple { }

[Test(typeof(_*_))]
class TypeOfGenericTuple { }

[Test(typeof(int -> int))]
class TypeOfIntToIntFunc { }

[Test(typeof(_ -> _))]
class TypeOfGenericFunc { }

[Test(typeof(IList[int]))]
class TypeOfIntIList { }

[Test(typeof(IList[_]))]
class TypeOfGenericIList { }

[Test(typeof(List[Dictionary[int, int]]))]
class TypeOfIntIntDictionaryList { }

[Test(typeof(void))]
class TypeOfVoid { }

[Record]
class TestAttribute : Attribute
{
  public Type : Type; 
}

/*
BEGIN-OUTPUT
TypeOfObject - Object
TypeOfStringList - List`1[String]
TypeOfGenericList - List`1
TypeOfIntArray - Int32[]
TypeOfGenericArray - Object[]
TypeOfIntStringTuple - Tuple`2[Int32, String]
TypeOfGenericTuple - Tuple`2
TypeOfIntToIntFunc - Function`2[Int32, Int32]
TypeOfGenericFunc - Function`2[Object, Object]
TypeOfIntIList - IList`1[Int32]
TypeOfGenericIList - IList`1
TypeOfIntIntDictionaryList - List`1[Dictionary`2[Int32, Int32]]
TypeOfVoid - Void
END-OUTPUT
*/